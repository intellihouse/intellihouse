import org.apache.tools.ant.filters.*

dependencies {
	compile project(':house.intelli.core')

	compile 'com.pi4j:pi4j-core:1.1'
//	compile 'com.pi4j:pi4j-gpio-extension:1.1'

	compile "org.slf4j:log4j-over-slf4j:$slf4jVersion", "ch.qos.logback:logback-classic:$logbackVersion"

	compile "org.springframework:spring-context:$springVersion"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
	
}

jar {
	manifest {
		attributes(
			'Main-Class': 'house.intelli.raspi.IntelliHouseRaspi',
			'Class-Path': configurations.runtime.collect { it.getName() }.join(' '))
	}
}

task copyDependencies(type: Copy) {
	into "$buildDir/assembly/house.intelli.raspi/lib"
	from configurations.runtime
}

task copyJar(type: Copy) {
	into "$buildDir/assembly/house.intelli.raspi/lib"
	from "$buildDir/libs"
}

def filterTokenMap = [
			'project.artifactId' : project.name,
			'project.version' : project.version
		]

task copyFilesFromAssembly(type: Copy) {
	into "$buildDir/assembly/house.intelli.raspi"
	from 'src/assembly/installation.properties'

	// Use ANT filter ReplaceTokens.
	filter(ReplaceTokens, tokens: filterTokenMap)
}

task copyFilesFromBin(type: Copy) {
	into "$buildDir/assembly/house.intelli.raspi/bin"
	from 'src/bin'

	// Use ANT filter ReplaceTokens.
	filter(ReplaceTokens, tokens: filterTokenMap)
}

task chmodMainExecutable(type: Exec, dependsOn: [ copyFilesFromBin, copyFilesFromAssembly ]) {
	commandLine = ['chmod', 'a+x', 'house.intelli.raspi']
	workingDir = file("$buildDir/assembly/house.intelli.raspi/bin")
}

task tarGzAssembly(type: Tar, dependsOn: [ chmodMainExecutable, copyJar, copyDependencies ]) {
	compression = Compression.GZIP
	classifier = 'bin'
	extension = 'tar.gz' // default is 'tgz'
	includeEmptyDirs true
	from "$buildDir/assembly"
}

//task zipAssembly(type: Zip, dependsOn: tarGzAssembly) {
//	classifier = 'bin'
//	includeEmptyDirs true
//	from "$buildDir/assembly"
//}

artifacts{
//    archives tarGzAssembly, zipAssembly
	archives tarGzAssembly
}

//build.dependsOn(zipAssembly)
build.dependsOn(tarGzAssembly)
