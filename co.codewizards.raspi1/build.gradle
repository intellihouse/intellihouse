import org.apache.tools.ant.filters.*

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

	compile 'com.pi4j:pi4j-core:1.1'
//	compile 'com.pi4j:pi4j-gpio-extension:1.1'

	compile 'org.usb4java:usb4java-javax:1.2.0'
	compile 'org.usb4java:usb4java:1.2.0'

	provided 'org.rxtx:rxtx:2.1.7' // 'apt-get install librxtx-java' on the raspi! because RXTX requires native libs anyway.
//	compile 'org.rxtx:rxtx:2.1.7' // 'apt-get install librxtx-java' on the raspi! because RXTX requires native libs anyway.

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jar {
	manifest {
		attributes(
			'Main-Class': 'co.codewizards.raspi1.Raspi1Main',
			'Class-Path': configurations.runtime.collect { it.getName() }.join(' '))
	}
}

task copyDependencies(type: Copy) {
	into "$buildDir/assembly/raspi1/lib"
	from configurations.runtime
}

task copyJar(type: Copy) {
	into "$buildDir/assembly/raspi1/lib"
	from "$buildDir/libs"
}

def filterTokenMap = [
			'project.artifactId' : project.name,
			'project.version' : project.version
		]

task copyFilesFromAssembly(type: Copy) {
	into "$buildDir/assembly/raspi1"
	from 'src/assembly/installation.properties'

	// Use ANT filter ReplaceTokens.
	filter(ReplaceTokens, tokens: filterTokenMap)
}

task copyFilesFromBin(type: Copy) {
	into "$buildDir/assembly/raspi1/bin"
	from 'src/bin'

	// Use ANT filter ReplaceTokens.
	filter(ReplaceTokens, tokens: filterTokenMap)
}

task chmodMainExecutable(type: Exec, dependsOn: [ copyFilesFromBin, copyFilesFromAssembly ]) {
	commandLine = ['chmod', 'a+x', 'raspi1']
	workingDir = file("$buildDir/assembly/raspi1/bin")
}

task tarGzAssembly(type: Tar, dependsOn: [ chmodMainExecutable, copyJar, copyDependencies ]) {
	compression = Compression.GZIP
	classifier = 'bin'
	extension = 'tar.gz' // default is 'tgz'
	includeEmptyDirs true
	from "$buildDir/assembly"
}

task zipAssembly(type: Zip, dependsOn: tarGzAssembly) {
	classifier = 'bin'
	includeEmptyDirs true
	from "$buildDir/assembly"
}

artifacts{
    archives tarGzAssembly, zipAssembly
}

build.dependsOn(zipAssembly)